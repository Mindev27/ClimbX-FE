---
description: "Dart 코딩 컨벤션, 네이밍 규칙, 주석 스타일, 클래스 구조, 에러 핸들링"
---

# Dart 코딩 컨벤션

## 네이밍 컨벤션

### 클래스명
- **PascalCase** 사용
- 예: `UserProfile`, `AuthService`, `CustomAppBar`

### 메서드 및 변수명
- **camelCase** 사용
- 예: `signInWithGoogle()`, `currentStreak`, `isLoggedIn()`

### 파일명
- **snake_case** 사용
- 예: `user_profile.dart`, `auth_service.dart`, `custom_app_bar.dart`

### 상수
#### 컴파일 타임 상수 (const 객체, 문자열 키)
- **camelCase** 사용
- 예: `_secureStorage`, `_tokenKey`, `defaultTimeout`

#### 환경 변수 및 외부 설정 상수
- **SCREAMING_SNAKE_CASE** 사용
- 예: `NAVER_MAP_CLIENT_ID`, `API_BASE_URL`

```dart
// 컴파일 타임 상수
static const FlutterSecureStorage _secureStorage = FlutterSecureStorage();
static const String _tokenKey = 'jwt_token';

// 환경 변수 상수
static const String API_BASE_URL = 'https://api.example.com';
```

## 주석 스타일

### 클래스 문서화
```dart
/// 사용자 프로필 정보를 담는 모델
class UserProfile {
  // ...
}
```

### 한글 주석 사용
- 코드 내 주석은 한글로 작성
- 비즈니스 로직 설명에는 한글 사용

```dart
// 1. API를 통해 토큰 발급
final token = await _requestGoogleOAuthToken();

// 토큰 발급 실패 시 바로 리턴
if (token == null) {
  developer.log('Google OAuth 로그인 실패: 토큰 발급 실패', name: 'AuthService');
  return null;
}
```

## 로깅

### developer.log 사용
```dart
import 'dart:developer' as developer;

developer.log('Google OAuth 로그인 시작', name: 'AuthService');
```

### 로그 포맷
- 액션 설명 + name 파라미터로 클래스명 지정
- 에러 로그에는 구체적인 에러 내용 포함

## 코드 구조

### 클래스 멤버 순서
1. 상수 및 static 변수
2. 인스턴스 변수
3. 생성자
4. factory 생성자
5. public 메서드
6. private 메서드 (언더스코어로 시작)

### 에러 핸들링
```dart
try {
  // 메인 로직
} catch (e) {
  developer.log('에러 메시지: $e', name: 'ClassName');
  return null; // 또는 적절한 기본값
}
```

## 색상 정의

### Color 헥스 코드 사용
```dart
const Color(0xFFFFFFFF)  // 흰색
const Color(0xFF1E293B)  // 어두운 회색
const Color(0xFFF8FAFC)  // 연한 회색
```

## 문자열 리터럴

### 큰따옴표 사용
```dart
const String title = "ClimbX";
final String message = "로그인이 완료되었습니다";
```
