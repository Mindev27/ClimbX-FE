---
description: "Flutter 베스트 프랙티스, 클린 아키텍처, BLoC 패턴, 테스팅, 성능 최적화"
alwaysApply: true
---

# Flutter 베스트 프랙티스

## 유연성 공지

> **참고**: 이는 권장 프로젝트 구조이지만, 기존 프로젝트 구조에 유연하게 적응해야 합니다.
> 프로젝트가 다른 구성을 따르는 경우 이러한 구조적 패턴을 강요하지 마세요.
> Flutter 베스트 프랙티스를 적용하면서 기존 프로젝트 아키텍처와의 일관성을 유지하는 데 집중하세요.

## Flutter 베스트 프랙티스 원칙

1. **아키텍처 적응성**: 클린 코드 원칙을 유지하면서 기존 프로젝트 아키텍처에 적응
2. **최신 기술 활용**: Flutter 3.x 기능과 Material 3 디자인 사용
3. **Clean Architecture**: BLoC 패턴을 사용한 클린 아키텍처 구현
4. **상태 관리**: 적절한 상태 관리 원칙 준수
5. **의존성 주입**: 적절한 의존성 주입 사용
6. **에러 핸들링**: 적절한 에러 핸들링 구현
7. **플랫폼 가이드라인**: 플랫폼별 디자인 가이드라인 준수
8. **국제화**: 적절한 로컬라이제이션 기법 사용

## 권장 프로젝트 구조

> **참고**: 이는 참조 구조입니다. 프로젝트의 기존 구성에 맞게 조정하세요.

```
lib/
  core/
    constants/          # 앱 전체 상수
    theme/             # 테마 관련 파일
    utils/             # 유틸리티 함수
    widgets/           # 공통 위젯
  features/
    feature_name/
      data/
        datasources/   # 데이터 소스 (API, 로컬 DB)
        models/        # 데이터 모델
        repositories/  # Repository 구현체
      domain/
        entities/      # 비즈니스 엔티티
        repositories/  # Repository 인터페이스
        usecases/      # 비즈니스 로직
      presentation/
        bloc/          # BLoC 상태 관리
        pages/         # 화면 페이지
        widgets/       # 기능별 위젯
  l10n/               # 다국어 지원
  main.dart
test/
  unit/               # 단위 테스트
  widget/             # 위젯 테스트
  integration/        # 통합 테스트
```

## 코딩 가이드라인

### 1. Null Safety
- 적절한 null safety 사용법 준수
- nullable 타입과 non-nullable 타입 명확히 구분

### 2. 에러 핸들링
- Either 타입을 사용한 적절한 에러 핸들링 구현
- 예외 상황에 대한 명확한 처리

### 3. 네이밍 컨벤션
- 적절한 네이밍 컨벤션 준수
- 의미 있고 명확한 이름 사용

### 4. 위젯 구성
- 적절한 위젯 컴포지션 사용
- 재사용 가능한 위젯 설계

### 5. 라우팅
- GoRouter를 사용한 적절한 라우팅 구현
- 타입 안전한 네비게이션

### 6. 폼 검증
- 적절한 폼 유효성 검사 구현
- 사용자 친화적 에러 메시지

### 7. 상태 관리
- BLoC를 사용한 적절한 상태 관리
- 단방향 데이터 플로우

### 8. 의존성 주입
- GetIt을 사용한 적절한 의존성 주입
- 느슨한 결합 구조

### 9. 자산 관리
- 적절한 자산 관리 기법
- 효율적인 리소스 사용

### 10. 테스팅
- 적절한 테스팅 사례 준수
- 높은 테스트 커버리지

## 위젯 가이드라인

### 위젯 설계 원칙

1. **작고 집중적**: 위젯을 작고 집중적으로 유지
2. **const 생성자**: 가능한 경우 const 생성자 사용
3. **위젯 키**: 적절한 위젯 키 구현
4. **레이아웃 원칙**: 적절한 레이아웃 원칙 준수
5. **생명주기**: 적절한 위젯 생명주기 메서드 사용
6. **에러 경계**: 적절한 에러 경계 구현
7. **성능 최적화**: 적절한 성능 최적화 기법 사용
8. **접근성**: 적절한 접근성 가이드라인 준수

### 위젯 베스트 프랙티스

```dart
// 올바른 위젯 구조 예시
class CustomButton extends StatelessWidget {
  const CustomButton({
    super.key,
    required this.onPressed,
    required this.text,
    this.isLoading = false,
  });

  final VoidCallback onPressed;
  final String text;
  final bool isLoading;

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: isLoading ? null : onPressed,
      child: isLoading
          ? const CircularProgressIndicator()
          : Text(text),
    );
  }
}
```

## 성능 가이드라인

### 성능 최적화 기법

1. **이미지 캐싱**: 적절한 이미지 캐싱 사용
   ```dart
   CachedNetworkImage(
     imageUrl: imageUrl,
     placeholder: (context, url) => const CircularProgressIndicator(),
     errorWidget: (context, url, error) => const Icon(Icons.error),
   )
   ```

2. **리스트뷰 최적화**: 적절한 리스트뷰 최적화 구현
   ```dart
   ListView.builder(
     itemCount: items.length,
     itemBuilder: (context, index) => ItemWidget(item: items[index]),
   )
   ```

3. **빌드 메서드 최적화**: 적절한 빌드 메서드 최적화
4. **상태 관리 패턴**: 적절한 상태 관리 패턴 준수
5. **메모리 관리**: 적절한 메모리 관리 구현
6. **플랫폼 채널**: 필요한 경우 적절한 플랫폼 채널 사용
7. **컴파일 최적화**: 적절한 컴파일 최적화 기법 준수

## 테스팅 가이드라인

### 테스팅 전략

1. **단위 테스트**: 비즈니스 로직에 대한 단위 테스트 작성
   ```dart
   test('should return user when login is successful', () async {
     // Arrange
     when(mockRepository.login(any, any))
         .thenAnswer((_) async => Right(mockUser));
     
     // Act
     final result = await loginUseCase(LoginParams(email, password));
     
     // Assert
     expect(result, Right(mockUser));
   });
   ```

2. **위젯 테스트**: UI 컴포넌트에 대한 위젯 테스트 구현
   ```dart
   testWidgets('should display loading indicator when loading', (tester) async {
     await tester.pumpWidget(MyApp());
     await tester.pump();
     
     expect(find.byType(CircularProgressIndicator), findsOneWidget);
   });
   ```

3. **통합 테스트**: 기능 테스트를 위한 통합 테스트 사용
4. **모킹 전략**: 적절한 모킹 전략 구현
5. **테스트 커버리지**: 적절한 테스트 커버리지 도구 사용
6. **테스트 네이밍**: 적절한 테스트 네이밍 컨벤션 준수
7. **CI/CD 테스팅**: 적절한 CI/CD 테스팅 구현

## BLoC 패턴 가이드라인

### BLoC 구조

```dart
// Event
abstract class AuthEvent extends Equatable {
  const AuthEvent();
}

class LoginRequested extends AuthEvent {
  final String email;
  final String password;
  
  const LoginRequested({required this.email, required this.password});
  
  @override
  List<Object> get props => [email, password];
}

// State
abstract class AuthState extends Equatable {
  const AuthState();
}

class AuthInitial extends AuthState {
  @override
  List<Object> get props => [];
}

class AuthLoading extends AuthState {
  @override
  List<Object> get props => [];
}

// BLoC
class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final LoginUseCase loginUseCase;
  
  AuthBloc({required this.loginUseCase}) : super(AuthInitial()) {
    on<LoginRequested>(_onLoginRequested);
  }
  
  Future<void> _onLoginRequested(
    LoginRequested event,
    Emitter<AuthState> emit,
  ) async {
    emit(AuthLoading());
    
    final result = await loginUseCase(
      LoginParams(email: event.email, password: event.password),
    );
    
    result.fold(
      (failure) => emit(AuthError(failure.message)),
      (user) => emit(AuthSuccess(user)),
    );
  }
 }
 ```
# Flutter 베스트 프랙티스

## 유연성 공지

> **참고**: 이는 권장 프로젝트 구조이지만, 기존 프로젝트 구조에 유연하게 적응해야 합니다.
> 프로젝트가 다른 구성을 따르는 경우 이러한 구조적 패턴을 강요하지 마세요.
> Flutter 베스트 프랙티스를 적용하면서 기존 프로젝트 아키텍처와의 일관성을 유지하는 데 집중하세요.

## Flutter 베스트 프랙티스 원칙

1. **아키텍처 적응성**: 클린 코드 원칙을 유지하면서 기존 프로젝트 아키텍처에 적응
2. **최신 기술 활용**: Flutter 3.x 기능과 Material 3 디자인 사용
3. **Clean Architecture**: BLoC 패턴을 사용한 클린 아키텍처 구현
4. **상태 관리**: 적절한 상태 관리 원칙 준수
5. **의존성 주입**: 적절한 의존성 주입 사용
6. **에러 핸들링**: 적절한 에러 핸들링 구현
7. **플랫폼 가이드라인**: 플랫폼별 디자인 가이드라인 준수
8. **국제화**: 적절한 로컬라이제이션 기법 사용

## 권장 프로젝트 구조

> **참고**: 이는 참조 구조입니다. 프로젝트의 기존 구성에 맞게 조정하세요.

```
lib/
  core/
    constants/          # 앱 전체 상수
    theme/             # 테마 관련 파일
    utils/             # 유틸리티 함수
    widgets/           # 공통 위젯
  features/
    feature_name/
      data/
        datasources/   # 데이터 소스 (API, 로컬 DB)
        models/        # 데이터 모델
        repositories/  # Repository 구현체
      domain/
        entities/      # 비즈니스 엔티티
        repositories/  # Repository 인터페이스
        usecases/      # 비즈니스 로직
      presentation/
        bloc/          # BLoC 상태 관리
        pages/         # 화면 페이지
        widgets/       # 기능별 위젯
  l10n/               # 다국어 지원
  main.dart
test/
  unit/               # 단위 테스트
  widget/             # 위젯 테스트
  integration/        # 통합 테스트
```

## 코딩 가이드라인

### 1. Null Safety
- 적절한 null safety 사용법 준수
- nullable 타입과 non-nullable 타입 명확히 구분

### 2. 에러 핸들링
- Either 타입을 사용한 적절한 에러 핸들링 구현
- 예외 상황에 대한 명확한 처리

### 3. 네이밍 컨벤션
- 적절한 네이밍 컨벤션 준수
- 의미 있고 명확한 이름 사용

### 4. 위젯 구성
- 적절한 위젯 컴포지션 사용
- 재사용 가능한 위젯 설계

### 5. 라우팅
- GoRouter를 사용한 적절한 라우팅 구현
- 타입 안전한 네비게이션

### 6. 폼 검증
- 적절한 폼 유효성 검사 구현
- 사용자 친화적 에러 메시지

### 7. 상태 관리
- BLoC를 사용한 적절한 상태 관리
- 단방향 데이터 플로우

### 8. 의존성 주입
- GetIt을 사용한 적절한 의존성 주입
- 느슨한 결합 구조

### 9. 자산 관리
- 적절한 자산 관리 기법
- 효율적인 리소스 사용

### 10. 테스팅
- 적절한 테스팅 사례 준수
- 높은 테스트 커버리지

## 위젯 가이드라인

### 위젯 설계 원칙

1. **작고 집중적**: 위젯을 작고 집중적으로 유지
2. **const 생성자**: 가능한 경우 const 생성자 사용
3. **위젯 키**: 적절한 위젯 키 구현
4. **레이아웃 원칙**: 적절한 레이아웃 원칙 준수
5. **생명주기**: 적절한 위젯 생명주기 메서드 사용
6. **에러 경계**: 적절한 에러 경계 구현
7. **성능 최적화**: 적절한 성능 최적화 기법 사용
8. **접근성**: 적절한 접근성 가이드라인 준수

### 위젯 베스트 프랙티스

```dart
// 올바른 위젯 구조 예시
class CustomButton extends StatelessWidget {
  const CustomButton({
    super.key,
    required this.onPressed,
    required this.text,
    this.isLoading = false,
  });

  final VoidCallback onPressed;
  final String text;
  final bool isLoading;

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: isLoading ? null : onPressed,
      child: isLoading
          ? const CircularProgressIndicator()
          : Text(text),
    );
  }
}
```

## 성능 가이드라인

### 성능 최적화 기법

1. **이미지 캐싱**: 적절한 이미지 캐싱 사용
   ```dart
   CachedNetworkImage(
     imageUrl: imageUrl,
     placeholder: (context, url) => const CircularProgressIndicator(),
     errorWidget: (context, url, error) => const Icon(Icons.error),
   )
   ```

2. **리스트뷰 최적화**: 적절한 리스트뷰 최적화 구현
   ```dart
   ListView.builder(
     itemCount: items.length,
     itemBuilder: (context, index) => ItemWidget(item: items[index]),
   )
   ```

3. **빌드 메서드 최적화**: 적절한 빌드 메서드 최적화
4. **상태 관리 패턴**: 적절한 상태 관리 패턴 준수
5. **메모리 관리**: 적절한 메모리 관리 구현
6. **플랫폼 채널**: 필요한 경우 적절한 플랫폼 채널 사용
7. **컴파일 최적화**: 적절한 컴파일 최적화 기법 준수

## 테스팅 가이드라인

### 테스팅 전략

1. **단위 테스트**: 비즈니스 로직에 대한 단위 테스트 작성
   ```dart
   test('should return user when login is successful', () async {
     // Arrange
     when(mockRepository.login(any, any))
         .thenAnswer((_) async => Right(mockUser));
     
     // Act
     final result = await loginUseCase(LoginParams(email, password));
     
     // Assert
     expect(result, Right(mockUser));
   });
   ```

2. **위젯 테스트**: UI 컴포넌트에 대한 위젯 테스트 구현
   ```dart
   testWidgets('should display loading indicator when loading', (tester) async {
     await tester.pumpWidget(MyApp());
     await tester.pump();
     
     expect(find.byType(CircularProgressIndicator), findsOneWidget);
   });
   ```

3. **통합 테스트**: 기능 테스트를 위한 통합 테스트 사용
4. **모킹 전략**: 적절한 모킹 전략 구현
5. **테스트 커버리지**: 적절한 테스트 커버리지 도구 사용
6. **테스트 네이밍**: 적절한 테스트 네이밍 컨벤션 준수
7. **CI/CD 테스팅**: 적절한 CI/CD 테스팅 구현

## BLoC 패턴 가이드라인

### BLoC 구조

```dart
// Event
abstract class AuthEvent extends Equatable {
  const AuthEvent();
}

class LoginRequested extends AuthEvent {
  final String email;
  final String password;
  
  const LoginRequested({required this.email, required this.password});
  
  @override
  List<Object> get props => [email, password];
}

// State
abstract class AuthState extends Equatable {
  const AuthState();
}

class AuthInitial extends AuthState {
  @override
  List<Object> get props => [];
}

class AuthLoading extends AuthState {
  @override
  List<Object> get props => [];
}

// BLoC
class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final LoginUseCase loginUseCase;
  
  AuthBloc({required this.loginUseCase}) : super(AuthInitial()) {
    on<LoginRequested>(_onLoginRequested);
  }
  
  Future<void> _onLoginRequested(
    LoginRequested event,
    Emitter<AuthState> emit,
  ) async {
    emit(AuthLoading());
    
    final result = await loginUseCase(
      LoginParams(email: event.email, password: event.password),
    );
    
    result.fold(
      (failure) => emit(AuthError(failure.message)),
      (user) => emit(AuthSuccess(user)),
    );
  }
 }
 ```
